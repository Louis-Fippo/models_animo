#!/usr/bin/python2.7
#-*- coding: utf-8 -*-


"""
* Python program to compare Model checking between IMITATOR and UPAAL of 
ANIMO models

Name          : compareIMITATORUPAAL.py
Version       : 0.0
Author        : Louis Fippo Fitime

Created       : 2017/04/19
Last modified : 2017/04/20


"""

#importation of bibliothèques

import os
import re
import argparse
import numpy as np
import pandas as pd

#ggplot pour les courbes


#http://pandas.pydata.org/pandas-docs/stable/dsintro.html
#https://docs.python.org/3.1/library/re.html
#expressions regulière diverses, bon à savoir


#program arguments mangement

parser = argparse.ArgumentParser()

#add of options
parser.add_argument("-v", "--verbose", help = "increase output verbosity", action = "store_true")
parser.add_argument("-c", "--compare",  action = "store_true", help = "compare the model checking between IMITATOR and UPAALL on ANIMO models")

#parse options
args = parser.parse_args()



#start

if args.compare:

    #dataframe for concentration
    dataConcen = open("modelesImi/dataConcentration.txt","wa")
    etatConcen = open("modelesImi/etatConcentration.txt","wa")
    #read files
    fichier = open("modelesImi/testConcentrations-statesspaceshort.states","r")

    concentration = fichier.read()
    nextLigneGood = False #to know if the next ligne contains automata and clocks
    
    #quelques motifs pour les expressions régulières
    motifEntier = r"[+-]?[0-9]+"
    motifReel = r"[+-]?(([0-9]+[eE][+-]?[0-9]+)|([0-9]+\.[0-9]*([eE][+-]?[0-9]+)?)|(\.[0-9]+([eE][+-]?[0-9]+)?))"
    ETAT = r"(?P<STATE>STATE)"
    concentrationl = concentration.split("\n")

    
    etatConcen.write("automates"+"\t")


    #var i to determine if is the first case
    i = 0
    j = 0

    for ligne in concentrationl:

     #extract states, clocks and clocks values
        
        
        modex = re.search(r"(?P<STATE>STATE) (?P<etat>\d+)",ligne)
               
        if modex is not None:
            print ligne     
	    nextLigneGood = True 
            print modex.group('STATE')
	    print modex.group('etat')
	    etatConcen.write(modex.group('etat')+"\t")
	
	else:
	    if nextLigneGood:
	        
                print "is the next ligne:"+ligne
	        sligne = ligne.split(",")
	        for sl in sligne:
                     print "is sl:"+sl
		     
		     #for real number please update with the formula above
  	             modexbis = re.search(r"(?P<automate>\w+) = (?P<clockP>.*) \(~ (?P<clock>.*)\)", sl)
               
	             if modexbis is not None:
                           print modexbis.groups()
           	           print modexbis.group('automate')
	                   print modexbis.group('clock')
			   if i == 0 :
			       with open("modelesImi/automate"+modexbis.group('automate')+".conca", "a") as automate:
			            automate.write(modexbis.group('automate')+"\t")
				    automate.write(modexbis.group('clock')+"\t")
				    print modexbis.group('clock')
				    automate.close()
				    ligneheader = modexbis.group('automate')+"\t"+modexbis.group('clock')+"\t"
		          
			   else:
			        with open("modelesImi/automate"+modexbis.group('automate')+".conca","a") as automate:
				     automate.write(modexbis.group('clock')+"\t")
				     automate.close()
				     ligneheader = "\t"+modexbis.group('clock')+"\t"
			  
		           i = i + 1  
	             nextLigneGood = False
                     #i = i + 1    
                        



    #build a dataframe to plot results

 


