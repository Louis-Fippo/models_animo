<?xml version="1.0" encoding="utf-8" standalone="no"?><nta>
<declaration>
// Place global declarations here.
clock globalTime;
const int INFINITE_TIME = -1;
const int N_REACTANTS = 5;
broadcast chan reacted[N_REACTANTS];
broadcast chan reacting, do_update, decide_react;

//R0 = EGF
int R0 := 100;
const int R0Levels := 100;

//R1 = EGFR
int R1 := 0;
const int R1Levels := 100;

//R2 = EGFR internalization
int R2 := 0;
const int R2Levels := 100;

//R3 = ERK
int R3 := 0;
const int R3Levels := 100;

//R4 = ERK phosphatase
int R4 := 1;
const int R4Levels := 1;


typedef struct {
	int[-99980001, 99980001] b;
	int e;
} double_t;

const double_t zero = {0, 0};
const double_t INFINITE_TIME_DOUBLE = {-1000, -3}; //INFINITE_TIME (-1) translated into double

int minCrit = N_REACTANTS;
bool criticalSession[N_REACTANTS] = {0, 0, 0, 0, 0};
void enterCrit(int id) {
	criticalSession[id] = true;
	if (id &lt; minCrit) {
		minCrit = id;
	}
}
void exitCrit(int id) {
	criticalSession[id] = false;
	if (id == minCrit) {
		while (minCrit &lt; N_REACTANTS &amp;&amp; !criticalSession[minCrit]) minCrit++;
	}
}


typedef int[-1, 1073741822] time_t;

typedef struct {
	time_t T;
} timeActivity;

//Reaction R4 (ERK phosphatase) --| R3 (ERK)
timeActivity R4_R3;
const double_t k_R4_R3 = {2500, -9};

//Reaction R2 (EGFR internalization) --| R1 (EGFR)
timeActivity R2_R1;
const double_t k_R2_R1 = {1000, -8};

//Reaction R1 (EGFR) --&gt; R3 (ERK)
timeActivity R1_R3;
const double_t k_R1_R3 = {1000, -10};

//Reaction R0 (EGF) --&gt; R1 (EGFR)
timeActivity R0_R1;
const double_t k_R0_R1 = {5000, -9};

//Reaction R1 (EGFR) --&gt; R2 (EGFR internalization)
timeActivity R1_R2;
const double_t k_R1_R2 = {2500, -9};



double_t subtract(double_t a, double_t b) { // a - b
	double_t r = {-1000, -1000};
	if (a.b == 0) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (a.e == b.e) {
		r.b = a.b - b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b - b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b - b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b - b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 - b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t add(double_t a, double_t b) { // a + b
	double_t r = {-1000,-1000};
	if (a.b == 0) {
		return b;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) return b;
	if (a.e == b.e) {
		r.b = a.b + b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b + b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b + b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b + b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 + b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t multiply(double_t a, double_t b) { // a * b
	double_t r;
	r.b = a.b * b.b;
	if (r.b % 1000 &lt; 500) {
		r.b = r.b / 1000;
	} else {
		r.b = 1 + r.b / 1000;
	}
	r.e = a.e + b.e + 3;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	}
	while (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

int conta_inf = 0, conta_bigN = 0;
double_t inverse(double_t a) { // 1 / a
	double_t r;
	if (a.b == 0) {
		//conta_inf = conta_inf + 1;
		return INFINITE_TIME_DOUBLE;
	}
	if (a.e &lt; -12) { // 1 / 1e-9 is still ok, but 1 / 1e-10 is too large (&gt; 2^30 - 2, the largest allowed constant for guards/invariants)
		conta_bigN = conta_bigN + 1;
		r.b = 1073;
		r.e = 6;
		return r;
	}
	r.b = 10000000 / a.b;
	r.e = -7 - a.e;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	}
	return r;
}

time_t power(int a, int b) { // a ^ b (b &gt;= 0)
	time_t r = 1;
	while (b &gt; 0) {
		r = r * a;
		b = b - 1;
	}
	return r;
}

time_t round(double_t a) { // double --&gt; integer
	if (a == INFINITE_TIME_DOUBLE) { // Don't need to translate literally if we have infinite
		return INFINITE_TIME;
	}
	if (a.e &lt; -4) {
		return 0;
	}
	if (a.e == -1) {
		if (a.b % 10 &lt; 5) {
			return a.b / 10;
		} else {
			return 1 + a.b / 10;
		}
	}
	if (a.e == -2) {
		if (a.b % 100 &lt; 50) {
			return a.b / 100;
		} else {
			return 1 + a.b / 100;
		}
	}
	if (a.e == -3) {
		if (a.b % 1000 &lt; 500) {
			return a.b / 1000;
		} else {
			return 1 + a.b / 1000;
		}
	}
	if (a.e == -4) {
		if (a.b &lt; 5000) return 0;
		else return 1;
	}
	return a.b * power(10, a.e);
}

double_t scenario1(double_t k, double_t r1, double_t r1Levels, bool r1Active) {
	double_t E;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	return multiply(k, E);
}


double_t scenario2_3(double_t k, double_t r2, double_t r2Levels, bool r2Active, double_t r1, double_t r1Levels, bool r1Active) {
	double_t E, S;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	if (r2Active) { //Same for R2
		S = r2;
	} else {
		S = subtract(r2Levels, r2);
	}
	return multiply(k, multiply(E, S));
}


double_t int_to_double(int a) { //Used to translate an activity level into double.
	double_t r;
	if (a &lt; 10) {
		r.b = a * 1000;
		r.e = -3;
	} else if (a &lt; 100) {
		r.b = a * 100;
		r.e = -2;
	} else if (a &lt; 1000) {
		r.b = a * 10;
		r.e = -1;
	} else if (a &lt; 10000) { //Our model supports up to 100 levels, so this should be the most it makes sense to check
		r.b = a;
		r.e = 0;
	}
	return r;
}
</declaration>

<template>
  <name>Reactant_R1</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta = 0;
time_t tL, tU;
clock c;
double_t totalRate = INFINITE_TIME_DOUBLE, oldRate = INFINITE_TIME_DOUBLE;


double_t compute_rate() {
	double_t R2_R1_r = scenario1(k_R2_R1, int_to_double(R2), int_to_double(R2Levels), true);
	double_t R0_R1_r = scenario1(k_R0_R1, int_to_double(R0), int_to_double(R0Levels), true);
	R2_R1.T = round(inverse(R2_R1_r));
	R0_R1.T = round(inverse(R0_R1_r));
	return add(subtract(zero, R2_R1_r), R0_R1_r);
}

void update() {
	oldRate = totalRate;
	totalRate = compute_rate();
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
		if (tL &lt; 1) tL = 1; // Ensure that the minimal duration for a reaction is 1 t.u., otherwise the model will behave nondeterministically
		if (tU &lt; 1) tU = 1;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so large, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
}

void make_urgent() {
	c = 0;
	tU = 0;
	tL = 0;
}

bool rate_significantly_changed(double_t oldRate, double_t newRate) { //True if the new rate is at least double the old one, or if the sign of the rates is different (the reaction changes direction. Note that no change of direction will be detected if we are at MAX or 0, or we were constant until now)
	if ((oldRate.b &lt; 0 &amp;&amp; newRate.b &gt; 0 || oldRate.b &gt; 0 &amp;&amp; newRate.b &lt; 0) &amp;&amp; (R &lt; MAX &amp;&amp; R &gt; 0)) {
		return true;
	}
	return false;
}

void decide_reset() {
	if (rate_significantly_changed(oldRate, totalRate)) { //If the updated conditions have significantly changed the rate, restart the reaction from the beginning, without considering the work already done.
		c = 0;
	}
}

bool can_react() {
	return minCrit == N_REACTANTS &amp;&amp; (tL != INFINITE_TIME &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return minCrit == N_REACTANTS &amp;&amp; (tL == INFINITE_TIME || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1560" y="-810"> <committed/>
  </location>
  <location id="id3" x="-1853" y="-646"> <name x="-1850" y="-634">responding</name> <urgent/>
  </location>
  <location id="id5" x="-1232" y="-731"> <name x="-1224" y="-755">start</name> <committed/>
  </location>
  <location id="id6" x="-1419" y="-841"> <name x="-1401" y="-857">not_reacting</name>
  </location>
  <location id="id7" x="-1419" y="-731"> <name x="-1411" y="-756">updating</name> <committed/>
  </location>
  <location id="id8" x="-1666" y="-731"> <name x="-1730" y="-747">waiting</name> <label kind="invariant" x="-1730" y="-719">c &lt;= tU</label>
  </location>
  <init ref="id5"/>
  <transition> <source ref="id3"/> <target ref="id7"/> <label kind="synchronisation" x="-1793" y="-663">do_update!</label> <label kind="assignment" x="-1793" y="-646">update(), decide_reset()</label> <nail x="-1419" y="-646"/>
  </transition>
  <transition> <source ref="id3"/> <target ref="id7"/> <label kind="synchronisation" x="-1793" y="-663">do_update?</label> <label kind="assignment" x="-1793" y="-646">update(), decide_reset()</label> <nail x="-1419" y="-646"/>
  </transition>
  <transition> <source ref="id5"/> <target ref="id7"/> <label kind="assignment" x="-1343" y="-731">update()</label> <label kind="synchronisation" x="-1343" y="-748">do_update!</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id6"/> <label kind="guard" x="-1415" y="-812">cant_react()</label> <label kind="synchronisation" x="-1415" y="-795">decide_react!</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id6"/> <label kind="guard" x="-1415" y="-812">cant_react()</label> <label kind="synchronisation" x="-1415" y="-795">decide_react?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-748">can_react() &amp;&amp; c &lt;= tU</label> <label kind="synchronisation" x="-1598" y="-731">decide_react!</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-748">can_react() &amp;&amp; c &lt;= tU</label> <label kind="synchronisation" x="-1598" y="-731">decide_react?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-705">can_react() &amp;&amp; c &gt; tU</label> <label kind="assignment" x="-1606" y="-671">make_urgent()</label> <label kind="synchronisation" x="-1606" y="-688">decide_react!</label> <nail x="-1479" y="-688"/> <nail x="-1632" y="-688"/>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-705">can_react() &amp;&amp; c &gt; tU</label> <label kind="assignment" x="-1606" y="-671">make_urgent()</label> <label kind="synchronisation" x="-1606" y="-688">decide_react?</label> <nail x="-1479" y="-688"/> <nail x="-1632" y="-688"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id0"/> <label kind="guard" x="-1690" y="-844">c &gt;= tL</label> <label kind="synchronisation" x="-1690" y="-827">reacting!</label> <label kind="assignment" x="-1690" y="-810">react(), c = 0,
enterCrit(1)</label> <nail x="-1666" y="-810"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id0"/> <label kind="guard" x="-1690" y="-844">c &gt;= tL</label> <label kind="synchronisation" x="-1690" y="-827">reacting?</label> <label kind="assignment" x="-1690" y="-810">react(), c = 0,
enterCrit(1)</label> <nail x="-1666" y="-810"/>
  </transition>
  <transition> <source ref="id0"/> <target ref="id7"/> <label kind="guard" x="-1544" y="-841">minCrit == 1</label> <label kind="synchronisation" x="-1544" y="-827">reacted[1]!</label> <label kind="assignment" x="-1544" y="-810">update(),
exitCrit(1)</label> <nail x="-1489" y="-810"/>
  </transition>
  <transition> <source ref="id6"/> <target ref="id3"/> <label kind="synchronisation" x="-1504" y="-894">reacted[2]?</label> <label kind="assignment" x="-1504" y="-877">c = 0</label> <nail x="-1419" y="-877"/> <nail x="-1853" y="-877"/>
  </transition>
  <transition> <source ref="id6"/> <target ref="id3"/> <label kind="synchronisation" x="-1504" y="-936">reacted[0]?</label> <label kind="assignment" x="-1504" y="-919">c = 0</label> <nail x="-1419" y="-919"/> <nail x="-1853" y="-919"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id3"/> <label kind="synchronisation" x="-1836" y="-748">reacted[2]?</label> <label kind="guard" x="-1836" y="-765">c &gt; 0 &amp;&amp; c &lt; tL</label> <nail x="-1751" y="-731"/> <nail x="-1853" y="-731"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id3"/> <label kind="synchronisation" x="-1836" y="-796">reacted[0]?</label> <label kind="guard" x="-1836" y="-813">c &gt; 0 &amp;&amp; c &lt; tL</label> <nail x="-1751" y="-779"/> <nail x="-1853" y="-779"/>
  </transition>
</template>


<template>
  <name>Reactant_R2</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta = 0;
time_t tL, tU;
clock c;
double_t totalRate = INFINITE_TIME_DOUBLE, oldRate = INFINITE_TIME_DOUBLE;


double_t compute_rate() {
	double_t R1_R2_r = scenario1(k_R1_R2, int_to_double(R1), int_to_double(R1Levels), true);
	R1_R2.T = round(inverse(R1_R2_r));
	return R1_R2_r;
}

void update() {
	oldRate = totalRate;
	totalRate = compute_rate();
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
		if (tL &lt; 1) tL = 1; // Ensure that the minimal duration for a reaction is 1 t.u., otherwise the model will behave nondeterministically
		if (tU &lt; 1) tU = 1;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so large, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
}

void make_urgent() {
	c = 0;
	tU = 0;
	tL = 0;
}

bool rate_significantly_changed(double_t oldRate, double_t newRate) { //True if the new rate is at least double the old one, or if the sign of the rates is different (the reaction changes direction. Note that no change of direction will be detected if we are at MAX or 0, or we were constant until now)
	if ((oldRate.b &lt; 0 &amp;&amp; newRate.b &gt; 0 || oldRate.b &gt; 0 &amp;&amp; newRate.b &lt; 0) &amp;&amp; (R &lt; MAX &amp;&amp; R &gt; 0)) {
		return true;
	}
	return false;
}

void decide_reset() {
	if (rate_significantly_changed(oldRate, totalRate)) { //If the updated conditions have significantly changed the rate, restart the reaction from the beginning, without considering the work already done.
		c = 0;
	}
}

bool can_react() {
	return minCrit == N_REACTANTS &amp;&amp; (tL != INFINITE_TIME &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return minCrit == N_REACTANTS &amp;&amp; (tL == INFINITE_TIME || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1560" y="-810"> <committed/>
  </location>
  <location id="id3" x="-1853" y="-646"> <name x="-1850" y="-634">responding</name> <urgent/>
  </location>
  <location id="id5" x="-1232" y="-731"> <name x="-1224" y="-755">start</name>
  </location>
  <location id="id6" x="-1419" y="-841"> <name x="-1401" y="-857">not_reacting</name>
  </location>
  <location id="id7" x="-1419" y="-731"> <name x="-1411" y="-756">updating</name> <committed/>
  </location>
  <location id="id8" x="-1666" y="-731"> <name x="-1730" y="-747">waiting</name> <label kind="invariant" x="-1730" y="-719">c &lt;= tU</label>
  </location>
  <init ref="id5"/>
  <transition> <source ref="id3"/> <target ref="id7"/> <label kind="synchronisation" x="-1793" y="-663">do_update!</label> <label kind="assignment" x="-1793" y="-646">update(), decide_reset()</label> <nail x="-1419" y="-646"/>
  </transition>
  <transition> <source ref="id3"/> <target ref="id7"/> <label kind="synchronisation" x="-1793" y="-663">do_update?</label> <label kind="assignment" x="-1793" y="-646">update(), decide_reset()</label> <nail x="-1419" y="-646"/>
  </transition>
  <transition> <source ref="id5"/> <target ref="id7"/> <label kind="assignment" x="-1343" y="-731">update()</label> <label kind="synchronisation" x="-1343" y="-748">do_update?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id6"/> <label kind="guard" x="-1415" y="-812">cant_react()</label> <label kind="synchronisation" x="-1415" y="-795">decide_react!</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id6"/> <label kind="guard" x="-1415" y="-812">cant_react()</label> <label kind="synchronisation" x="-1415" y="-795">decide_react?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-748">can_react() &amp;&amp; c &lt;= tU</label> <label kind="synchronisation" x="-1598" y="-731">decide_react!</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-748">can_react() &amp;&amp; c &lt;= tU</label> <label kind="synchronisation" x="-1598" y="-731">decide_react?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-705">can_react() &amp;&amp; c &gt; tU</label> <label kind="assignment" x="-1606" y="-671">make_urgent()</label> <label kind="synchronisation" x="-1606" y="-688">decide_react!</label> <nail x="-1479" y="-688"/> <nail x="-1632" y="-688"/>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-705">can_react() &amp;&amp; c &gt; tU</label> <label kind="assignment" x="-1606" y="-671">make_urgent()</label> <label kind="synchronisation" x="-1606" y="-688">decide_react?</label> <nail x="-1479" y="-688"/> <nail x="-1632" y="-688"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id0"/> <label kind="guard" x="-1690" y="-844">c &gt;= tL</label> <label kind="synchronisation" x="-1690" y="-827">reacting!</label> <label kind="assignment" x="-1690" y="-810">react(), c = 0,
enterCrit(2)</label> <nail x="-1666" y="-810"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id0"/> <label kind="guard" x="-1690" y="-844">c &gt;= tL</label> <label kind="synchronisation" x="-1690" y="-827">reacting?</label> <label kind="assignment" x="-1690" y="-810">react(), c = 0,
enterCrit(2)</label> <nail x="-1666" y="-810"/>
  </transition>
  <transition> <source ref="id0"/> <target ref="id7"/> <label kind="guard" x="-1544" y="-841">minCrit == 2</label> <label kind="synchronisation" x="-1544" y="-827">reacted[2]!</label> <label kind="assignment" x="-1544" y="-810">update(),
exitCrit(2)</label> <nail x="-1489" y="-810"/>
  </transition>
  <transition> <source ref="id6"/> <target ref="id3"/> <label kind="synchronisation" x="-1504" y="-894">reacted[1]?</label> <label kind="assignment" x="-1504" y="-877">c = 0</label> <nail x="-1419" y="-877"/> <nail x="-1853" y="-877"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id3"/> <label kind="synchronisation" x="-1836" y="-748">reacted[1]?</label> <label kind="guard" x="-1836" y="-765">c &gt; 0 &amp;&amp; c &lt; tL</label> <nail x="-1751" y="-731"/> <nail x="-1853" y="-731"/>
  </transition>
</template>


<template>
  <name>Reactant_R3</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta = 0;
time_t tL, tU;
clock c;
double_t totalRate = INFINITE_TIME_DOUBLE, oldRate = INFINITE_TIME_DOUBLE;


double_t compute_rate() {
	double_t R4_R3_r = scenario2_3(k_R4_R3, int_to_double(R3), int_to_double(R3Levels), true, int_to_double(R4), int_to_double(R4Levels), true);
	double_t R1_R3_r = scenario2_3(k_R1_R3, int_to_double(R3), int_to_double(R3Levels), false, int_to_double(R1), int_to_double(R1Levels), true);
	if (R4_R3_r.b == 0 &amp;&amp; R4 &gt; 0) { //If the downstream reactant (R) is the only reason for the inactivity of the reaction R4_R3 (note that R is actually R3), consider the reaction as still available (recomputing the rate as the one closest to the current situation), to avoid significant errors in performing the next update to R. We want to avoid considering any other reaction active on R as the only one possible during the whole next delta increment to R.
		//Using the following rate is not very precise, but makes for a much more precise total rate than we would get if considering the reaction as inactive (especially with low levels of granularity for R, i.e. small values of MAX)
		R4_R3_r = scenario2_3(k_R4_R3, int_to_double(1), int_to_double(R3Levels), true, int_to_double(R4), int_to_double(R4Levels), true);
	}
	if (R1_R3_r.b == 0 &amp;&amp; R1 &gt; 0) { //If the downstream reactant (R) is the only reason for the inactivity of the reaction R1_R3 (note that R is actually R3), consider the reaction as still available (recomputing the rate as the one closest to the current situation), to avoid significant errors in performing the next update to R. We want to avoid considering any other reaction active on R as the only one possible during the whole next delta increment to R.
		//Using the following rate is not very precise, but makes for a much more precise total rate than we would get if considering the reaction as inactive (especially with low levels of granularity for R, i.e. small values of MAX)
		R1_R3_r = scenario2_3(k_R1_R3, int_to_double(R3Levels - 1), int_to_double(R3Levels), false, int_to_double(R1), int_to_double(R1Levels), true);
	}
	R4_R3.T = round(inverse(R4_R3_r));
	R1_R3.T = round(inverse(R1_R3_r));
	return add(subtract(zero, R4_R3_r), R1_R3_r);
}

void update() {
	oldRate = totalRate;
	totalRate = compute_rate();
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(inverse(totalRate));
		tU = tL;
		if (tL &lt; 1) tL = 1; // Ensure that the minimal duration for a reaction is 1 t.u., otherwise the model will behave nondeterministically
		if (tU &lt; 1) tU = 1;
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so large, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
}

void make_urgent() {
	c = 0;
	tU = 0;
	tL = 0;
}

bool rate_significantly_changed(double_t oldRate, double_t newRate) { //True if the new rate is at least double the old one, or if the sign of the rates is different (the reaction changes direction. Note that no change of direction will be detected if we are at MAX or 0, or we were constant until now)
	if ((oldRate.b &lt; 0 &amp;&amp; newRate.b &gt; 0 || oldRate.b &gt; 0 &amp;&amp; newRate.b &lt; 0) &amp;&amp; (R &lt; MAX &amp;&amp; R &gt; 0)) {
		return true;
	}
	return false;
}

void decide_reset() {
	if (rate_significantly_changed(oldRate, totalRate)) { //If the updated conditions have significantly changed the rate, restart the reaction from the beginning, without considering the work already done.
		c = 0;
	}
}

bool can_react() {
	return minCrit == N_REACTANTS &amp;&amp; (tL != INFINITE_TIME &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return minCrit == N_REACTANTS &amp;&amp; (tL == INFINITE_TIME || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1560" y="-810"> <committed/>
  </location>
  <location id="id3" x="-1853" y="-646"> <name x="-1850" y="-634">responding</name> <urgent/>
  </location>
  <location id="id5" x="-1232" y="-731"> <name x="-1224" y="-755">start</name>
  </location>
  <location id="id6" x="-1419" y="-841"> <name x="-1401" y="-857">not_reacting</name>
  </location>
  <location id="id7" x="-1419" y="-731"> <name x="-1411" y="-756">updating</name> <committed/>
  </location>
  <location id="id8" x="-1666" y="-731"> <name x="-1730" y="-747">waiting</name> <label kind="invariant" x="-1730" y="-719">c &lt;= tU</label>
  </location>
  <init ref="id5"/>
  <transition> <source ref="id3"/> <target ref="id7"/> <label kind="synchronisation" x="-1793" y="-663">do_update!</label> <label kind="assignment" x="-1793" y="-646">update(), decide_reset()</label> <nail x="-1419" y="-646"/>
  </transition>
  <transition> <source ref="id3"/> <target ref="id7"/> <label kind="synchronisation" x="-1793" y="-663">do_update?</label> <label kind="assignment" x="-1793" y="-646">update(), decide_reset()</label> <nail x="-1419" y="-646"/>
  </transition>
  <transition> <source ref="id5"/> <target ref="id7"/> <label kind="assignment" x="-1343" y="-731">update()</label> <label kind="synchronisation" x="-1343" y="-748">do_update?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id6"/> <label kind="guard" x="-1415" y="-812">cant_react()</label> <label kind="synchronisation" x="-1415" y="-795">decide_react!</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id6"/> <label kind="guard" x="-1415" y="-812">cant_react()</label> <label kind="synchronisation" x="-1415" y="-795">decide_react?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-748">can_react() &amp;&amp; c &lt;= tU</label> <label kind="synchronisation" x="-1598" y="-731">decide_react!</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-748">can_react() &amp;&amp; c &lt;= tU</label> <label kind="synchronisation" x="-1598" y="-731">decide_react?</label>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-705">can_react() &amp;&amp; c &gt; tU</label> <label kind="assignment" x="-1606" y="-671">make_urgent()</label> <label kind="synchronisation" x="-1606" y="-688">decide_react!</label> <nail x="-1479" y="-688"/> <nail x="-1632" y="-688"/>
  </transition>
  <transition> <source ref="id7"/> <target ref="id8"/> <label kind="guard" x="-1632" y="-705">can_react() &amp;&amp; c &gt; tU</label> <label kind="assignment" x="-1606" y="-671">make_urgent()</label> <label kind="synchronisation" x="-1606" y="-688">decide_react?</label> <nail x="-1479" y="-688"/> <nail x="-1632" y="-688"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id0"/> <label kind="guard" x="-1690" y="-844">c &gt;= tL</label> <label kind="synchronisation" x="-1690" y="-827">reacting!</label> <label kind="assignment" x="-1690" y="-810">react(), c = 0,
enterCrit(3)</label> <nail x="-1666" y="-810"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id0"/> <label kind="guard" x="-1690" y="-844">c &gt;= tL</label> <label kind="synchronisation" x="-1690" y="-827">reacting?</label> <label kind="assignment" x="-1690" y="-810">react(), c = 0,
enterCrit(3)</label> <nail x="-1666" y="-810"/>
  </transition>
  <transition> <source ref="id0"/> <target ref="id7"/> <label kind="guard" x="-1544" y="-841">minCrit == 3</label> <label kind="synchronisation" x="-1544" y="-827">reacted[3]!</label> <label kind="assignment" x="-1544" y="-810">update(),
exitCrit(3)</label> <nail x="-1489" y="-810"/>
  </transition>
  <transition> <source ref="id6"/> <target ref="id3"/> <label kind="synchronisation" x="-1504" y="-894">reacted[4]?</label> <label kind="assignment" x="-1504" y="-877">c = 0</label> <nail x="-1419" y="-877"/> <nail x="-1853" y="-877"/>
  </transition>
  <transition> <source ref="id6"/> <target ref="id3"/> <label kind="synchronisation" x="-1504" y="-936">reacted[1]?</label> <label kind="assignment" x="-1504" y="-919">c = 0</label> <nail x="-1419" y="-919"/> <nail x="-1853" y="-919"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id3"/> <label kind="synchronisation" x="-1836" y="-748">reacted[4]?</label> <label kind="guard" x="-1836" y="-765">c &gt; 0 &amp;&amp; c &lt; tL</label> <nail x="-1751" y="-731"/> <nail x="-1853" y="-731"/>
  </transition>
  <transition> <source ref="id8"/> <target ref="id3"/> <label kind="synchronisation" x="-1836" y="-796">reacted[1]?</label> <label kind="guard" x="-1836" y="-813">c &gt; 0 &amp;&amp; c &lt; tL</label> <nail x="-1751" y="-779"/> <nail x="-1853" y="-779"/>
  </transition>
</template>



<system>
R1_ = Reactant_R1(R1, 100);
R2_ = Reactant_R2(R2, 100);
R3_ = Reactant_R3(R3, 100);



system R1_, R2_, R3_;

</system>
<queries><query><formula>E&lt;&gt; (R0 &lt; 50)</formula><comment>ANIMO formula</comment></query></queries></nta>